{% set name = "spectrafit" %}
{% set version = "0.15.0" %}

package:
  name: {{ name|lower }}-recipe
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/spectrafit-{{ version }}.tar.gz
  sha256: dbc1716bf69b850dbafbc6175e0363298498ea88f9ad3bbd3cf456d5d134ec4f

build:
  number: 0

outputs:
  - name: {{ name|lower }}
    script: build_base.sh
    build:
      # noarch: python
      skip: true  # [py<38]
      entry_points:
        - spectrafit = spectrafit.spectrafit:command_line_runner
        - spectrafit-file-converter = spectrafit.plugins.file_converter:command_line_runner
        - spectrafit-data-converter = spectrafit.plugins.data_converter:command_line_runner
    requirements:
      build:
       - python                                 # [build_platform != target_platform]
       - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - python
        - pip
        - poetry
      run:
        - python
        - pyyaml >=6.0,<7.0
        - ascii-art >=5.7,<6.0
        - emcee >=3.1.2,<4.0.0
        - lmfit >=1.0.3,<2.0.0
        - numdifftools >=0.9.39,<0.10.0
        - numpy >=1.21.6,<2.0.0
        - openpyxl >=3.0.9,<4.0.0
        - pandas >=1.3.5,<2.0.0
        - pydantic >=1.10.1,<2.0.0
        - scikit-learn >=1.0.2,<2.0.0
        - seaborn >=0.11.2,<0.12.0
        - tabulate >=0.8.10,<0.10.0
        - tomli >=2.0.1,<3.0.0
        - pydantic >=1.10.1,<2.0.0
        - tomli-w >=1.0.0,<2.0.0
        - tqdm >=4.64.0,<5.0.0
    test:
      imports:
        - spectrafit
      commands:
        - spectrafit --help
        - spectrafit-file-converter --help
        - spectrafit-data-converter --help
  - name: {{ name|lower }}-jupyter
    build:
      noarch: python
      skip: true  # [not linux64]
      entry_points:
        - spectrafit-jupyter = spectrafit.app.app:jupyter
      host:
        - python
        - pip
        - poetry
    requirements:
      run:
        - {{ pin_subpackage('spectrafit', max_pin='x.x.x') }}
        - jupyterlab >=3.4.5,<4.0.0
        - python-kaleido ==0.2.1.post1  # [not linux64]
        - python-kaleido ==0.2.1  # [linux64]
        - itables >=1.3.0,<2.0.0
        - plotly >=5.10.0,<6.0.0
        - dtale >=2.8.1,<3.0.0
    test:
      imports:
        - spectrafit
      commands:
        - spectrafit-jupyter --help
        - python -c "from spectrafit.plugins.notebook import SpectraFitNotebook"
  - name: {{ name|lower }}-graph
    build:
      noarch: python
      skip: true  # [not linux64]
      entry_points:
        - spectrafit-pkl-visualizer = spectrafit.plugins.pkl_visualizer:command_line_runner
        - spectrafit-pkl-converter = spectrafit.plugins.pkl_converter:command_line_runner
      host:
        - python
        - pip
        - poetry
    requirements:
      run:
        - {{ pin_subpackage('spectrafit', max_pin='x.x.x') }}
        - networkx >=3.0.0,<4.0.0
        - pydot >=1.4.2,<2.0.0
    test:
      imports:
        - spectrafit
      commands:
        - spectrafit --help
        - spectrafit-pkl-visualizer --help
        - spectrafit-pkl-converter --help
  # - name: {{ name|lower }}-rixs
  #   build:
  #     noarch: python
  #     # Skip this package for cross-builds. We will only need a single upload anyways
  #     skip: true  # [not linux64]
  #     entry_points:
  #       - spectrafit-rixs-visualizer = spectrafit.plugins.rixs_visualizer:command_line_runner
  #       - spectrafit-rixs-converter = spectrafit.plugins.rixs_converter:command_line_runner
  #     host:
  #       - python
  #       - pip
  #       - poetry
  #   requirements:
  #     run:
  #       - {{ pin_subpackage('spectrafit', max_pin='x.x.x') }}
  #       - {{ pin_subpackage('spectrafit-graph', max_pin='x.x.x') }}
  #       - {{ pin_subpackage('spectrafit-jupyter', max_pin='x.x.x') }}
  #       - jupyter-dash >=0.4.0,<1.0.0
  #       - ipywidgets >8.0.0,<9.0.0
  #       - dash-bootstrap-components >=1.0.0,<2.0.0
  #       # - dash-bootstrap-templates >=1.0.0,<2.0.0
  #   test:
  #     imports:
  #       - spectrafit
  #     commands:
  #       - spectrafit-rixs-visualizer --help
  #       - spectrafit-rixs-converter --help
  #     host:
  #       - python
  #       - pip
  #       - build
  # - name: {{ name|lower }}-all
    build:
      noarch: python
      skip: true  # [not linux64]
      host:
        - python
        - pip
        - poetry
    requirements:
      run:
        - {{ pin_subpackage('spectrafit', max_pin='x.x.x') }}
        - {{ pin_subpackage('spectrafit-jupyter', max_pin='x.x.x') }}
        - {{ pin_subpackage('spectrafit-graph', max_pin='x.x.x') }}
        # - {{ pin_subpackage('spectrafit-rixs', max_pin='x.x.x') }}
    test:
      imports:
        - spectrafit
      commands:
        - spectrafit --help
        - spectrafit-file-converter --help
        - spectrafit-data-converter --help
        - spectrafit-jupyter --help
        - python -c "from spectrafit.plugins.notebook import SpectraFitNotebook"

about:
  home: https://pypi.org/project/spectrafit/
  summary: Fast fitting of 2D-Spectra with established routines
  description: |
    SpectraFit is a command-line and Jupyter-notebook tool for
    quick data-fitting based on the regular expression of
    distribution functions.
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  doc_url: https://anselmoo.github.io/spectrafit/
  dev_url: https://github.com/anselmoo/spectrafit

extra:
  recipe-maintainers:
    - Anselmoo
